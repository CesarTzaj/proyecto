package JFrames;

import com.mysql.cj.xdevapi.Table;
import connection.DbaConnection;

import java.awt.Image;
import java.awt.List;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class IngresoPlanilla extends javax.swing.JFrame {

    Connection connection;
    DbaConnection dbaConnection = new DbaConnection();
    PreparedStatement ps;
    ResultSet rs;
    DefaultTableModel Modelo;
    boolean estadoAlta = false;
    boolean errorInteger = false;
    boolean repetidos = false;
    boolean estadoNormal = false;
    boolean suspendidos = false;

    public IngresoPlanilla() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Ingreso De Planilla");
        this.setExtendedState(IngresoPlanilla.MAXIMIZED_BOTH);
        btnCargarArchivo.setEnabled(false);
        btnBusquedaNueva.setEnabled(false);
        btnLimpiar.setEnabled(false);
        btnguardar.setEnabled(false);
        txtAnio.setEnabled(false);
        txtMes.setEnabled(false);
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("./brackgournd/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        container = new javax.swing.JPanel();
        head = new javax.swing.JPanel();
        Icon = new javax.swing.JPanel();
        lblIcon = new javax.swing.JLabel();
        header = new javax.swing.JPanel();
        tittle = new javax.swing.JPanel();
        lblTittle = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        txtIdEmpresa = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        BtnBuscar = new javax.swing.JButton();
        btnCargarArchivo = new javax.swing.JButton();
        LblNombre = new javax.swing.JLabel();
        btnBusquedaNueva = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnguardar = new javax.swing.JButton();
        txtPlanillaID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMes = new javax.swing.JTextField();
        txtAnio = new javax.swing.JTextField();
        main = new javax.swing.JPanel();
        jTablePnale = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblModelo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        setPreferredSize(new java.awt.Dimension(1000, 856));
        getContentPane().setLayout(new java.awt.CardLayout());

        container.setBackground(new java.awt.Color(92, 91, 80));
        container.setPreferredSize(new java.awt.Dimension(1000, 849));
        container.setLayout(new java.awt.BorderLayout(0, 10));

        head.setBackground(new java.awt.Color(92, 91, 80));
        head.setMaximumSize(new java.awt.Dimension(2147483647, 180));
        head.setMinimumSize(new java.awt.Dimension(628, 130));
        head.setPreferredSize(new java.awt.Dimension(775, 180));
        head.setLayout(new javax.swing.BoxLayout(head, javax.swing.BoxLayout.LINE_AXIS));

        Icon.setBackground(new java.awt.Color(92, 91, 80));
        Icon.setMaximumSize(new java.awt.Dimension(160, 160));
        Icon.setMinimumSize(new java.awt.Dimension(128, 128));
        Icon.setPreferredSize(new java.awt.Dimension(160, 160));

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brackgournd/mainIcon.jpg"))); // NOI18N
        lblIcon.setMaximumSize(new java.awt.Dimension(130, 130));
        Icon.add(lblIcon);

        head.add(Icon);

        header.setBackground(new java.awt.Color(92, 91, 80));
        header.setOpaque(false);
        header.setLayout(new javax.swing.BoxLayout(header, javax.swing.BoxLayout.PAGE_AXIS));

        tittle.setBackground(new java.awt.Color(92, 91, 80));
        tittle.setMaximumSize(new java.awt.Dimension(32767, 42));
        tittle.setMinimumSize(new java.awt.Dimension(500, 42));
        tittle.setLayout(new java.awt.GridBagLayout());

        lblTittle.setBackground(new java.awt.Color(0, 0, 0));
        lblTittle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTittle.setText("INGRESO DE PLANILLA");
        tittle.add(lblTittle, new java.awt.GridBagConstraints());

        header.add(tittle);

        menu.setBackground(new java.awt.Color(92, 91, 80));
        menu.setMaximumSize(new java.awt.Dimension(2147483647, 140));
        menu.setMinimumSize(new java.awt.Dimension(463, 130));
        menu.setPreferredSize(new java.awt.Dimension(1081, 130));
        java.awt.GridBagLayout menuLayout = new java.awt.GridBagLayout();
        menuLayout.columnWidths = new int[] {0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0};
        menuLayout.rowHeights = new int[] {0, 0, 0, 0, 0, 0, 0};
        menuLayout.columnWeights = new double[] {0.0};
        menuLayout.rowWeights = new double[] {0.0};
        menu.setLayout(menuLayout);

        lblID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblID.setText("Empresa ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        menu.add(lblID, gridBagConstraints);

        txtIdEmpresa.setBackground(new java.awt.Color(255, 255, 255));
        txtIdEmpresa.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        txtIdEmpresa.setForeground(new java.awt.Color(0, 0, 0));
        txtIdEmpresa.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtIdEmpresa.setMaximumSize(new java.awt.Dimension(100, 26));
        txtIdEmpresa.setMinimumSize(new java.awt.Dimension(80, 25));
        txtIdEmpresa.setPreferredSize(new java.awt.Dimension(80, 25));
        txtIdEmpresa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdEmpresaKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        menu.add(txtIdEmpresa, gridBagConstraints);

        txtNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtNombre.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.setCaretColor(new java.awt.Color(0, 0, 0));
        txtNombre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtNombre.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 25;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        menu.add(txtNombre, gridBagConstraints);

        BtnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnBuscar.setText("Buscar");
        BtnBuscar.setMaximumSize(new java.awt.Dimension(87, 35));
        BtnBuscar.setPreferredSize(new java.awt.Dimension(87, 35));
        BtnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        menu.add(BtnBuscar, gridBagConstraints);

        btnCargarArchivo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCargarArchivo.setText("Cargar Archivo");
        btnCargarArchivo.setPreferredSize(new java.awt.Dimension(157, 35));
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        menu.add(btnCargarArchivo, gridBagConstraints);

        LblNombre.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        LblNombre.setText("Nombre de Empresa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        menu.add(LblNombre, gridBagConstraints);

        btnBusquedaNueva.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBusquedaNueva.setText("Nueva Busquda");
        btnBusquedaNueva.setMaximumSize(new java.awt.Dimension(164, 35));
        btnBusquedaNueva.setPreferredSize(new java.awt.Dimension(164, 35));
        btnBusquedaNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusquedaNuevaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        menu.add(btnBusquedaNueva, gridBagConstraints);

        btnLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLimpiar.setText("Limpiar y cargar ");
        btnLimpiar.setMaximumSize(new java.awt.Dimension(93, 35));
        btnLimpiar.setPreferredSize(new java.awt.Dimension(200, 38));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 19;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        menu.add(btnLimpiar, gridBagConstraints);

        btnguardar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnguardar.setText("GUARDAR");
        btnguardar.setPreferredSize(new java.awt.Dimension(120, 38));
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 30;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        menu.add(btnguardar, gridBagConstraints);

        txtPlanillaID.setBackground(new java.awt.Color(255, 255, 255));
        txtPlanillaID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtPlanillaID.setCaretColor(new java.awt.Color(0, 0, 0));
        txtPlanillaID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPlanillaID.setPreferredSize(new java.awt.Dimension(140, 25));
        txtPlanillaID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPlanillaIDKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        menu.add(txtPlanillaID, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Planilla ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        menu.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Mes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 34;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        menu.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Año");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 36;
        gridBagConstraints.gridy = 0;
        menu.add(jLabel3, gridBagConstraints);

        txtMes.setBackground(new java.awt.Color(255, 255, 255));
        txtMes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtMes.setForeground(new java.awt.Color(0, 0, 0));
        txtMes.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMes.setMaximumSize(new java.awt.Dimension(40, 26));
        txtMes.setMinimumSize(new java.awt.Dimension(40, 26));
        txtMes.setPreferredSize(new java.awt.Dimension(40, 25));
        txtMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMesKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 34;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        menu.add(txtMes, gridBagConstraints);

        txtAnio.setBackground(new java.awt.Color(255, 255, 255));
        txtAnio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtAnio.setForeground(new java.awt.Color(0, 0, 0));
        txtAnio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAnio.setMaximumSize(new java.awt.Dimension(60, 60));
        txtAnio.setMinimumSize(new java.awt.Dimension(60, 26));
        txtAnio.setPreferredSize(new java.awt.Dimension(60, 25));
        txtAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnioKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 36;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        menu.add(txtAnio, gridBagConstraints);

        header.add(menu);

        head.add(header);

        container.add(head, java.awt.BorderLayout.NORTH);

        main.setBackground(new java.awt.Color(219, 209, 125));
        main.setPreferredSize(new java.awt.Dimension(600, 680));

        jTablePnale.setPreferredSize(new java.awt.Dimension(800, 800));
        jTablePnale.setLayout(new java.awt.CardLayout());

        tblModelo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trabajador ID", "CUI", "Nombre", "Salario", "estado", "Posicion ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Long.class, java.lang.Object.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblModelo);
        if (tblModelo.getColumnModel().getColumnCount() > 0) {
            tblModelo.getColumnModel().getColumn(1).setMinWidth(150);
            tblModelo.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblModelo.getColumnModel().getColumn(1).setMaxWidth(150);
            tblModelo.getColumnModel().getColumn(2).setMinWidth(300);
            tblModelo.getColumnModel().getColumn(2).setPreferredWidth(310);
            tblModelo.getColumnModel().getColumn(2).setMaxWidth(330);
        }

        jTablePnale.add(jScrollPane3, "card2");

        main.add(jTablePnale);

        container.add(main, java.awt.BorderLayout.CENTER);

        jScrollPane1.setViewportView(container);

        getContentPane().add(jScrollPane1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBuscarActionPerformed
        // if(this.jTextFieldMarcaNombre.getText().length()>0)
        if (this.txtIdEmpresa.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese la empresa ID", "Importante", JOptionPane.WARNING_MESSAGE);
        } else {
            btnbuscar();
            buscarPlanillaid();

        }

    }//GEN-LAST:event_BtnBuscarActionPerformed

    private void txtIdEmpresaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdEmpresaKeyTyped
        char enter = evt.getKeyChar();
        char letraNumeo = evt.getKeyChar();
        if ((letraNumeo < '0' || letraNumeo > '9')) {
            evt.consume();
        }
        if (enter == KeyEvent.VK_ENTER) {
            if (this.txtIdEmpresa.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Ingrese la empresa ID", "Importante", JOptionPane.WARNING_MESSAGE);
            } else {
                btnbuscar();
            }
        }

    }//GEN-LAST:event_txtIdEmpresaKeyTyped

    private void btnBusquedaNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusquedaNuevaActionPerformed
        txtIdEmpresa.setEnabled(true);
        txtIdEmpresa.setText("");
        txtNombre.setText("");
        txtPlanillaID.setText("");
        txtMes.setText("");
        txtAnio.setText("");
        txtPlanillaID.setEnabled(true);
        txtAnio.setEnabled(false);
        txtMes.setEnabled(false);
        btnguardar.setEnabled(false);
        btnCargarArchivo.setEnabled(false);
        btnBusquedaNueva.setEnabled(false);
        btnLimpiar.setEnabled(false);
        limpiar();
    }//GEN-LAST:event_btnBusquedaNuevaActionPerformed

    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
        CargarArchivo();
        datosrepetidos();

        //  estadoAlta();
        Suspendidos();
        sueldo();

        if ((repetidos == false) && (errorInteger == false) && (suspendidos == true)) {
            btnguardar.setEnabled(true);
        }
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        if (txtAnio.getText().equals("") || txtMes.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Debe llenar todos los campos", "Aviso", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            int confirmacion = JOptionPane.showConfirmDialog(null, "Desea guardar los datos en la base de datos", "Confirmacion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirmacion == 0) {

                    Planilla(); 
                    InsertarPersonaNueva();
                    InsertarTrabajadorNueva();
                    estadoNormalDBA();
                    if (estadoNormal == true) {
                        if (revisionPlanillaRepetida() == false) {
                            PlanillaTrabajador();
                        }
                    }
                

                
            }
        }
    }//GEN-LAST:event_btnguardarActionPerformed

    private void txtPlanillaIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPlanillaIDKeyTyped
        char numero = evt.getKeyChar();
        if (numero < '0' || numero > '9') {
            evt.consume();
        }
        if (numero == KeyEvent.VK_ENTER) {
            if (this.txtPlanillaID.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Ingrese la empresa ID", "Importante", JOptionPane.WARNING_MESSAGE);
            } else {


                    if (busarEmpresa() == true && buscarPlanillaid() == true) {
                        btnCargarArchivo.setEnabled(true);
                        btnBusquedaNueva.setEnabled(true);
                        txtIdEmpresa.setEnabled(false);
                        txtAnio.setEnabled(false);
                        txtMes.setEnabled(false);
                        txtPlanillaID.setEnabled(false);
                    } else {
                        if (busarEmpresa() == true) {
                            txtPlanillaID.setEnabled(true);
                            txtPlanillaID.setText("");
                        } else {
                            txtPlanillaID.setEnabled(true);
                            txtPlanillaID.setText("");
                            txtIdEmpresa.setText("");
                        }
                    }


            }
        }
    }//GEN-LAST:event_txtPlanillaIDKeyTyped

    private void txtMesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesKeyTyped
        char numero = evt.getKeyChar();
        if (numero < '0' || numero > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_txtMesKeyTyped

    private void txtAnioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioKeyTyped
        char numero = evt.getKeyChar();
        if (numero < '0' || numero > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_txtAnioKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresoPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresoPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresoPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresoPlanilla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresoPlanilla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBuscar;
    private javax.swing.JPanel Icon;
    private javax.swing.JLabel LblNombre;
    private javax.swing.JButton btnBusquedaNueva;
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JPanel container;
    private javax.swing.JPanel head;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jTablePnale;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JPanel main;
    private javax.swing.JPanel menu;
    private javax.swing.JTable tblModelo;
    private javax.swing.JPanel tittle;
    private javax.swing.JTextField txtAnio;
    public javax.swing.JTextField txtIdEmpresa;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPlanillaID;
    // End of variables declaration//GEN-END:variables
// Comprobar si la empresa existe
    private boolean busarEmpresa() {
        conectar();
        String id = txtIdEmpresa.getText();
        String nombre;
        String sql = "Select id_empresa, empresa from empresa where id_empresa=?";
        try {
            ps = connection.prepareStatement(sql);
            ps.setString(1, id);
            rs = ps.executeQuery();
            if (rs.next()) {
                txtIdEmpresa.setText(rs.getString("id_empresa"));
                txtNombre.setText(rs.getString("empresa"));
                return true;
            } else {
                int opcion = JOptionPane.showConfirmDialog(null, "No se pudo encontrar la empresa ", "Importante", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (opcion == 0) {
                    try {
                        NuevaEmpresa nuevaEmpresa;
                        new NuevaEmpresa().setVisible(true);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "No se pudo abrir la ventana de nueva empresa ", "Nueva empresa", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "Error en la consulta", JOptionPane.ERROR_MESSAGE);
        }
        desconectar();
        return false;
    }
    // Buscar planilla

    private boolean buscarPlanillaid() {
        conectar();
        if (txtPlanillaID.getText().length()>0) {
             String sqll = "SELECT\n"
                + " ANIO, MES "
                + "FROM planilla "
                + "where ID_PLANILLA=?"
                + "AND empresa_id_empresa=?";
        try {
            ps = connection.prepareStatement(sqll);
            try {
                ps.setString(1, txtPlanillaID.getText());
                ps.setString(2, txtIdEmpresa.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            rs = ps.executeQuery();
            if (rs.next()) {
                txtAnio.setText(rs.getString("ANIO"));
                txtMes.setText(rs.getString("MES"));
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "No 1 se encontro el numero de planilla ingresado", "Error Planilla", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);
        }
        }
        desconectar();
        return false;
    }

//iCarga el archivo obtenido
    public ArrayList<Float> CargarArchivo() {
        ArrayList<String> error = new ArrayList<>();
        ArrayList<Float> EstadoS = new ArrayList<>();
        //JFileChooser fc  = new JFileChooser();
        //fc.showOpenDialog(null);
        //File archivo = fc.getSelectedFile();
        String url = "D:\\Gabriel\\Documents\\prueva.txt";
        try {
            BufferedReader br = new BufferedReader(new FileReader(url));
            String line = "";
            Object[] values = new Object[6];
            DecimalFormat frmt = new DecimalFormat();
            frmt.setMaximumFractionDigits(2);
            ArrayList<String> contador = new ArrayList<>();

            Modelo = (DefaultTableModel) tblModelo.getModel();
            while ((line = br.readLine()) != null) {
                String[] txtvalues = line.split(",");
                try {
                    values[0] = Integer.parseInt(txtvalues[0].trim());
                    values[1] = Long.parseLong(txtvalues[1].trim());
                    values[2] = txtvalues[2].toUpperCase().trim();
                    values[3] = frmt.format(Float.parseFloat(txtvalues[3]));
                    values[4] = txtvalues[4].toUpperCase().trim();
                    values[5] = Integer.parseInt(txtvalues[5].trim());
                    EstadoS.add((Float.parseFloat(txtvalues[3])));
                    Modelo.addRow(values);

                } catch (NumberFormatException e) {
                    errorInteger = true;
                    error.add(e.toString() + "\n");

                }
            }
            tblModelo.setModel(Modelo);
            btnLimpiar.setEnabled(true);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            JOptionPane.showMessageDialog(this, ioe.toString());
        }
        if (errorInteger == true) {
            JOptionPane.showMessageDialog(null, "NO SE PUDIERON CARGAR \n" + error, "Error", JOptionPane.WARNING_MESSAGE);
        }
        return EstadoS;
    }
//Se obtienen los estado

    ArrayList<String> estados() {
        ArrayList<String> obtenerEstados = new ArrayList<>();
        for (int i = 0; i < Modelo.getRowCount(); i++) {
            obtenerEstados.add((String) Modelo.getValueAt(i, 4));
        }
        return obtenerEstados;
    }

    // Obtener los ID Trabajador
    ArrayList<Integer> TrabajadorID() {
        ArrayList<Integer> trabajadorId = new ArrayList<>();
        for (int i = 0; i < Modelo.getRowCount(); i++) {
            trabajadorId.add((Integer) Modelo.getValueAt(i, 0));
        }
        return trabajadorId;
    }
    // Busca datos repetido en el txt

    private void datosrepetidos() {
        ArrayList<Integer> DatosRepetidos = new ArrayList<>();
        for (int i = 0; i < TrabajadorID().size(); i++) {
            for (int j = i + 1; j < TrabajadorID().size(); j++) {
                if (TrabajadorID().get(i).equals(TrabajadorID().get(j))) {
                    DatosRepetidos.add(TrabajadorID().get(i));
                    repetidos = true;
                }
            }
        }
        if (repetidos == true) {
            JOptionPane.showMessageDialog(this, "DATOS REPETIDO \n" + DatosRepetidos, "DATOS REPETIDOS", JOptionPane.WARNING_MESSAGE);
        }

    }
    // Se revisa que no hay trabajadores repetidos en la base de datos

    private boolean revisionPlanillaRepetida() {
        conectar();
        ArrayList<Integer> repetidos = new ArrayList<>();
        String sql = "SELECT\n"
                + "    pt.trabajador_idtrabajador\n"
                + "    FROM planillatrabajador pt, planilla pl\n"
                + "    where  pl.id_planilla= ?\n"
                + "    and pt.trabajador_idtrabajador =  ?\n"
                + "    and pt.planilla_id_planilla = pl.id_planilla";
        for (int i = 0; i < TrabajadorID().size(); i++) {
            try {
                ps = connection.prepareStatement(sql);
                ps.setString(1, txtPlanillaID.getText());
                ps.setInt(2, TrabajadorID().get(i));
                rs = ps.executeQuery();
                if (rs.next()) {
                    repetidos.add(rs.getInt("trabajador_idtrabajador"));
                }

            } catch (SQLException ex) {
                Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (repetidos.size() > 0) {
            JOptionPane.showMessageDialog(null, "Error hay datos repetidos en la misma planilla\n" + repetidos + "Datos repetidos en la planilla" + JOptionPane.WARNING_MESSAGE);
            return true;
        }
        desconectar();
        return false;
    }

    // Se obtiene los ID donde el estado es normal
    public ArrayList<Integer> estadoNormal() {
        ArrayList<Integer> estadoNomaltable = new ArrayList<>();
        for (int i = 0; i < estados().size(); i++) {
            switch (estados().get(i)) {
                case "N":
                    estadoNomaltable.add(TrabajadorID().get(i));
            }
        }
        return estadoNomaltable;
    }

    // Revisa si el la base de datos ya existe el trabajador con estado Normal 
    public void estadoNormalDBA() {
        if (estadoNormal().size() > 0) {

            conectar();
            String sql = "SELECT pt.trabajador_idtrabajador \n"
                    + "FROM ESTADOPLANILLA EST,PLANILLATRABAJADOR PT, PLANILLA PL \n"
                    + "WHERE pt.trabajador_idtrabajador = ?\n"
                    + "AND pl.empresa_id_empresa = ?\n" +
                    "AND est.descripcion = 'A'\n"
                    + "AND pt.estadoplanilla_idestado = est.idestado\n"
                    + "ANd pl.id_planilla = PT.planilla_id_planilla";
            ArrayList<Integer> estadoNomalDba = new ArrayList<>();
            for (int i = 0; i < estadoNormal().size(); i++) {
                try {
                    ps = connection.prepareStatement(sql);
                    ps.setInt(1, estadoNormal().get(i));
                    ps.setString(2, txtIdEmpresa.getText());
                    rs = ps.executeQuery();

                    if (rs.next()) {
                        estadoNormal().remove(i);
                    }
                    {
                        estadoNomalDba.add(estadoNormal().get(i));
                        estadoNormal = true;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.toString(), "Error en la consulta", JOptionPane.ERROR_MESSAGE);
                }
            }
            //cerrando Conexion
            desconectar();
            if (estadoNomalDba.size() > 0) {
                estadoNormal = false;
                JOptionPane.showMessageDialog(this, "Trabajadores No tiene estado Alta en esta empresa \n" + estadoNomalDba, "Error Estado", JOptionPane.WARNING_MESSAGE);
            } else {
                estadoNormal = true;
            }
        } else {
            estadoNormal = true;
        }

    }
// Se obtiene los trabajadores con estado Alta

    public ArrayList<Integer> estadoAlta() {
        conectar();
        String sql = "MERGE INTO Trabajador USING    (SELECT 1 FROM dual) ON (IdTrabajador= ?)\n"
                + "WHEN NOT matched THEN\n"
                + "INSERT (idtrabajador, Persona_cui) VALUES (?,?)";
        ArrayList<Integer> trabajadorID = new ArrayList<>();
        ArrayList<Long> cui = new ArrayList<>();
        for (int i = 0; i < estados().size(); i++) {
            switch (estados().get(i)) {
                case "A":
                    trabajadorID.add((Integer) Modelo.getValueAt(i, 0));
                    cui.add((Long) Modelo.getValueAt(i, 1));
            }
        }
        for (int i = 0; i < trabajadorID.size(); i++) {
            try {
                ps = connection.prepareStatement(sql);
                ps.setInt(1, trabajadorID.get(i));
                ps.setInt(2, trabajadorID.get(i));
                ps.setLong(3, cui.get(i));
                ps.executeQuery();
                estadoAlta = true;
            } catch (SQLException ex) {
                Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex, "Error para insertar", JOptionPane.ERROR_MESSAGE);
            }
        }
        desconectar();
        return trabajadorID;

    }

    // Se revisa si el trabajador ya existe con el estado Alta
    public void estadoAltaDBA() {
        if (estadoAlta().size() > 0) {
            conectar();
            ArrayList<Integer> estadoAltaTable = new ArrayList<>();
            String sql = "SELECT pt.trabajador_idtrabajador \n"
                    + "FROM ESTADOPLANILLA EST,PLANILLATRABAJADOR PT, PLANILLA PL \n"
                    + "WHERE pt.trabajador_idtrabajador = ?\n"
                    + "AND pl.planilla_id_planilla = ?\n" +
                    "AND est.descripcion = 'A'\n"
                    + "AND pt.estadoplanilla_idestado = est.idestado\n"
                    + "ANd pl.id_planilla = PT.planilla_id_planilla";
            for (int i = 0; i < estadoAlta().size(); i++) {
                try {
                    ps = connection.prepareStatement(sql);
                    ps.setInt(1, estadoAlta().get(i));
                    ps.setString(2, txtPlanillaID.getText());
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        estadoAlta().remove(i);

                    } else {

                        estadoAltaTable.add(estadoAlta().get(i));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.toString(), "Error en la consulta", JOptionPane.ERROR_MESSAGE);
                }
            }
            //insertarPersona =
            JOptionPane.showConfirmDialog(null, "No se encontraron \n ¿Desea crear nuevos registro? \n" + estadoAltaTable, "Confirmacion de datos", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            desconectar();

        }

    }

    //Validacion de suspendidos con sueldo mayor a 0
    public void Suspendidos() {
        String Errror = "hay trabajadores suspendidos con sueldo";
        boolean error = false;
        DecimalFormat frmt = new DecimalFormat();
        frmt.setMaximumFractionDigits(2);
        ArrayList<String> SueldoSinEspacio = new ArrayList<>();
        ArrayList<Float> sueldo = new ArrayList<>();

        for (int i = 0; i < estados().size(); i++) {
            switch (estados().get(i)) {
                case "S":
                    SueldoSinEspacio.add((String) Modelo.getValueAt(i, 3));
            }
        }
        for (int i = 0; i < SueldoSinEspacio.size(); i++) {
            SueldoSinEspacio.set(i, SueldoSinEspacio.get(i).replaceAll("\\,+", ""));
            sueldo.add(Float.parseFloat(SueldoSinEspacio.get(i)));
            if (sueldo.get(i) > 0) {
                error = true;
            }
        }
        if (error == true) {
            JOptionPane.showMessageDialog(null, Errror);
        } else {
            suspendidos = true;
        }
    }

    //Insertar persona nueva
    private boolean InsertarPersonaNueva() {
        conectar();
        ArrayList<Long> cui = new ArrayList<>();
        ArrayList<String> nombre = new ArrayList<>();
        for (int i = 0; i < Modelo.getRowCount(); i++) {
            cui.add(Long.parseLong(Modelo.getValueAt(i, 1).toString()));
            nombre.add(Modelo.getValueAt(i, 2).toString());
        }

        String sqlpersona = " MERGE INTO persona USING  (SELECT 1 FROM dual)\n"
                + "ON  (persona.cui= ?)\n"
                + "WHEN NOT matched THEN INSERT (cui, nombre) VALUES (?,?) ";
        for (int i = 0; i < cui.size(); i++) {
            try {
                ps = connection.prepareStatement(sqlpersona);
                ps.setLong(1, cui.get(i));
                ps.setLong(2, cui.get(i));
                ps.setString(3, nombre.get(i));
                ps.execute();
            } catch (SQLException ex) {
                Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex, "Error al obtener los datos", JOptionPane.ERROR_MESSAGE);
            }

        }
        desconectar();
        return false;
    }

    private boolean InsertarTrabajadorNueva() {
        conectar();
        ArrayList<Long> cui = new ArrayList<>();
        for (int i = 0; i < Modelo.getRowCount(); i++) {
            cui.add((Long) Modelo.getValueAt(i, 1));
        }
        //   insertarPersona = JOptionPane.showConfirmDialog(null, "No se encontraron \n ¿Desea crear nuevos registro? \n" + persona+"\n"+nombrePersonaNeva, "Confirmacion de datos", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        String sqlpersona = " MERGE INTO Trabajador USING    (SELECT 1 FROM dual) ON (IdTrabajador= ?)\n"
                + "WHEN NOT matched THEN\n"
                + "INSERT (idtrabajador, Persona_cui) VALUES (?,?)";
        for (int i = 0; i < cui.size(); i++) {
            try {
                ps = connection.prepareStatement(sqlpersona);
                ps.setInt(1, TrabajadorID().get(i));
                ps.setInt(2, TrabajadorID().get(i));
                ps.setLong(3, cui.get(i));
                ps.execute();
            } catch (SQLException ex) {
                Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex, "Error al obtener los datos", JOptionPane.ERROR_MESSAGE);
            }

        }
        desconectar();
        return false;
    }

    //Crear planilla 
    private void Planilla() {
        if (txtPlanillaID.getText().equals("")) {
            conectar();

        String sql = "INSERT INTO PLANILLA (ID_PLANILLA, ANIO, MES, EMPRESA_ID_EMPRESA) \n"
                + "VALUES ( ?, ?, ?, ?)";
        try {
            int empresaid = Integer.parseInt(txtIdEmpresa.getText());
            int anio = Integer.parseInt(txtAnio.getText());
            int mes = Integer.parseInt(txtMes.getText());
            String planillaid = txtMes.getText() + "" + txtAnio.getText() + "" + txtIdEmpresa.getText();

            try {

                ps = connection.prepareStatement(sql);

                ps.setString(1, (planillaid.toString()));
                ps.setInt(2, anio);
                ps.setInt(3, mes);
                ps.setInt(4, empresaid);

                ps.execute();
                txtPlanillaID.setText(planillaid);

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(null, ex);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        desconectar();
        
        }
    }

    private int idPlanilla() {
        conectar();
        String sql = "Select max(idPlanilla) max from planillatrabajador";
        try {
            ps = connection.prepareStatement(sql);
            rs = ps.executeQuery();
            int ultimoPlanillaID = 0;
            while (rs.next()) {
                ultimoPlanillaID = rs.getInt("max");
            }
            return ultimoPlanillaID;
        } catch (SQLException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "no se pudo obetner el ultimo id\n" + ex, "Error Planilla ID", JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException np) {
            JOptionPane.showMessageDialog(null, np);
        }
        desconectar();
        return 0;
    }

    // Se ingresa todos los datos
    private void PlanillaTrabajador() {
        if (tblModelo.getRowCount() > 0) {
            ArrayList<String> estadoid = new ArrayList<>();
            boolean confirmacion = false;
            conectar();
            String sql = "INSERT INTO PLANILLATRABAJADOR (IDPLANILLA, SUELDO, \n"
                    + "PLANILLA_ID_PLANILLA, TRABAJADOR_IDTRABAJADOR,\n"
                    + "ESTADOPLANILLA_IDESTADO, POSICION_IDPOSICION) \n"
                    + "VALUES (?, ?, ?, ?, ?, ?)";
            for (int i = 0; i < Modelo.getRowCount(); i++) {
                estadoid.add(Modelo.getValueAt(i, 5).toString());
                int max = idPlanilla() + 1;

                try {

                    ps = connection.prepareStatement(sql);
                    ps.setInt(1, max);
                    ps.setFloat(2, sueldo().get(i));
                    ps.setString(3, txtPlanillaID.getText());
                    ps.setInt(4, TrabajadorID().get(i));
                    ps.setInt(5, EstadoaInt().get(i));
                    ps.setString(6, estadoid.get(i));
                    ps.execute();
                    confirmacion = true;
                } catch (SQLException ex) {
                    confirmacion = false;
                    Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            desconectar();
            if (confirmacion == true) {
                
               JOptionPane.showMessageDialog(null, "Se an grabado los datos", "Cofirmacion ",JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    // obterner sueldo sin coma tipo float
    private ArrayList<Float> sueldo() {
        ArrayList<Float> sueldo = new ArrayList<>();
        ArrayList<String> SueldoSinComa = new ArrayList<>();
        for (int i = 0; i < Modelo.getRowCount(); i++) {
            SueldoSinComa.add(Modelo.getValueAt(i, 3).toString());
        }
        for (int i = 0; i < SueldoSinComa.size(); i++) {
            try {
                SueldoSinComa.set(i, (SueldoSinComa.get(i).replaceAll(",+", "")));
                sueldo.add(Float.parseFloat(SueldoSinComa.get(i)));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, e);

            }
        }
        return sueldo;
    }

    //convertir estado de letras a numeros
    private ArrayList<Integer> EstadoaInt() {
        ArrayList<String> estadoString = new ArrayList<>();
        ArrayList<Integer> estadoInt = new ArrayList<>();
        for (int i = 0; i < estados().size(); i++) {
            estadoString.add(estados().get(i).trim());
        }
        Collections.replaceAll(estadoString, "A", "1");
        Collections.replaceAll(estadoString, "S", "2");
        Collections.replaceAll(estadoString, "B", "3");
        Collections.replaceAll(estadoString, "N", "4");
        for (int i = 0; i < estadoString.size(); i++) {
            try {
                estadoInt.add(Integer.parseInt(estadoString.get(i)));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, e);
                JOptionPane.showMessageDialog(null, e, "Error al convertir letras a numeros", JOptionPane.ERROR_MESSAGE);
            }
        }
        return estadoInt;
    }

    //  Limpia Jtble y controla botones
    private void limpiar() {
        if (tblModelo.getRowCount() != 0) {
            Modelo.setRowCount(0);
            btnguardar.setEnabled(false);
            repetidos = false;
            errorInteger = false;
            estadoNormal = false;
            suspendidos = false;
            txtPlanillaID.setEnabled(true);
            txtPlanillaID.setEnabled(true);
            txtPlanillaID.setText("");
        }
    }

    //Abrir conexion
    private void conectar() {
        try {
            connection = dbaConnection.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Cerrar conexion
    private void desconectar() {

        try {
            connection.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(IngresoPlanilla.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex, "Error al desconectar", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnbuscar() {
        if (this.txtIdEmpresa.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese la empresa ID", "Importante", JOptionPane.WARNING_MESSAGE);
        } else {

            if (txtPlanillaID.getText().equals("")) {
                txtAnio.setEnabled(true);
                txtMes.setEnabled(true);
                txtPlanillaID.setEnabled(false);

                if (busarEmpresa() == true) {
                    btnCargarArchivo.setEnabled(true);
                    btnBusquedaNueva.setEnabled(true);
                    txtIdEmpresa.setEnabled(false);
                } else {
                    txtPlanillaID.setEnabled(true);

                    txtIdEmpresa.setText("");

                }
            }
            if (txtPlanillaID.getText().length() > 0) {

                if (busarEmpresa() == true && buscarPlanillaid() == true) {
                    btnCargarArchivo.setEnabled(true);
                    btnBusquedaNueva.setEnabled(true);
                    txtIdEmpresa.setEnabled(false);
                    txtAnio.setEnabled(false);
                    txtMes.setEnabled(false);
                    txtPlanillaID.setEnabled(false);
                } else {
                    if (busarEmpresa() == true) {
                        txtPlanillaID.setEnabled(true);
                        txtPlanillaID.setText("");
                    } else {
                        txtPlanillaID.setEnabled(true);
                        txtPlanillaID.setText("");
                        txtIdEmpresa.setText("");
                    }
                }

            }

        }
    }

}
